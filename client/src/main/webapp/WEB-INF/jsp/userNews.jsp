<!DOCTYPE html>
<html lang="en">
<head>
    <%@ page contentType="text/html;charset=utf-8" %>
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" type="text/css" href="../../CSS/nullstyle.css"/>
    <link rel="stylesheet" type="text/css" href="../../CSS/userNews.css"/>
    <title>MyCourse</title>
</head>
<body>
<header>
    <div class="logo">
        <img src="../../img/logo.png" />
        <div class="logo-text">MyStatistic</div>
    </div>
    <div class="exit-box">
        <div class="exit-text"></div>
        <img src="../../img/exit.png" class="exit" />
    </div>
</header>
<nav>
    <div class="nav-text aboutPage">О нас</div>
    <div class="nav-text newsPage">Материалы</div>
    <div class="nav-text mainPage">Главная</div>
    <div class="nav-text profilePage">Личный кабинет</div>
    <div class="nav-text testPage">Курсы</div>
</nav>
<div class="main">
    <div class="title-text">
        Мы собрали для Вас самые полезные и актуальные статьи
    </div>
</div>
<div class="news">
    <div class="news-block first">
        <div class="news-title">
            Топ 10 самых высокооплачиваемых языков программирования в 2022 году
        </div>
        <div class="news-description">
            Известная плтформа по поиску работы DevJobsScanner составила список
            самых высокооплачиваемых языков программирования. Вместе разберемся,
            кто же входит в первую десятку и посмотрим какие цифры рисуют
            работодатели нв объявлениях, чтобы привлечь специалистов
        </div>
        <div class="news-text">
            10. Java Script. В год: 105 000 $ (max: 350 000 $) В месяц: 8 750 $
            (max:29 000 $) <br />
            9. Java. В год: 107 000 $ (max: 300 000 $) В месяц: 8 900 $ (max:30
            000 $)
            <br />
            8. C/C++. В год: 109 000 $ (max: 330 000 $) В месяц: 9 000 $ (max: 29
            000 $) <br />
            7. Swift. В год: 114 000 $ (max: 230 000 $) В месяц: 9500 $ (max:19
            000 $) <br />
            6. Python. В год: 114 000 $ (max: 480 000 $) В месяц: 9500 $ (max:40
            000 $) <br />
            5. Golang. В год: 116 000 $ (max: 360 000 $) В месяц: 9600 $ (max: 30
            000 $) <br />
            4. Ruby. В год: 124 000 $ (max: 300 000 $) В месяц: 10 300 $ (max: 25
            000 $) <br />
            3. Scala. В год: 130 000 $ (max: 400 000 $) В месяц: 10 800 $ (max: 33
            000 $) <br />
            2. Rust. В год: 144 000 $ (max: 500 000 $) В месяц: 12 000 $ (max: 42
            000 $) <br />
            1. Solidity. В год: 151 000 $ (max: 1 000 000 $) В месяц: 12 500 $
            (max: 83 000 $)
        </div>
    </div>
    <div class="news-block second">
        <div class="news-title">
            6 универсальных идей для pet проектов вне зависимости от языка
        </div>
        <div class="news-description">
            Хотите создать что-нибудь эдакое, но вам не хватает фантазии и
            вдохновения? Держите 16 идей для разработки собственного проекта от
            «Библиотеки программиста».
        </div>
        <div class="news-text">
            Пет-проект – это собственный проект разработчика, над которым он
            трудится в свободное от работы время. Пет проект необходим в первую
            очередь для самостоятельного развития новых или уже имеющихся навыков.
            Он не ограничен ни сроками, ни определенным форматом, ни используемыми
            технологиями. В нем вы сами выбираете, что и как делать. С его помощью
            вы получаете возможность не только прокачать скилы, но и отвлечься от
            рабочей или учебной рутины. <br />
            Занимаясь своей непосредственной работой в офисе, новички, как
            правило, не могут определиться с тем, что же выбрать в качестве своего
            первого пет-проекта. Мнения их опытных коллег по этому поводу тоже
            расходятся: кто-то советует начинать со списка дел (todo List), потому
            что все так делают», другие предлагают замахнуться более сложную
            программу, чтобы выделиться. Но на самом деле сложность не имеет
            значения. Если вы создадите качественное и полезное для пользователя
            приложение, оно будет обречено на успех.
            <br />
            1. Калькуляторы. Программ для расчета искомых величин может быть
            огромное количество. Например, создайте приложение, определяющее
            заработок работников в зависимости от его навыков, стажа, опыта,
            показателей работы, бонусов, локации и других факторов, влияющих на
            оплату труда. <br />
            2. Боты. Это могут быть биржевые и игровые боты, веб-боты, чат-боты и
            боты поисковых систем. Бот – компьютерная программа, способная взять
            на себя роль человека, выполняющая за него определенные действия.
            <br />
            3. Трекеры.Трекеры бывают разные. Трекер расходов покажет, сколько вы
            потратили. Биткойн-трекер отслеживает текущий курс биткоина.
            Фитнес-трекер указывает суточное потребление калорий. Трекер отношений
            нужен для отслеживания вашей социальной жизни (темы разговоров,
            события, настроение и т. д.). Все они могут иметь интеграцию с
            календарем и другие встроенные функции.<br />
            4. Генераторы. Это могут быть генераторы пиксельной графики, генератор
            случайных API, генератор тем для поддержания беседы, генератор
            рандомных плейлистов, платформа генератора брендинга. <br />
            5. Игры. Вы можете взять в разработку любую мини-игру будь то 2D или
            3D (тетрис, змейка, аркады). Воссоздать популярную карточную игру,
            такую ​​как блек-джек и покер. А можете создать собственную с
            уникальным сюжетом и геймплеем. <br />
            6. Мессенджеры и соцсети. Эта категория приложений является самой
            востребованной у пользователей. Конечно, переплюнуть известные
            миллионные платформы будет сложно, ведь за ними стоят огромные команды
            разработчиков. Но замахнуться на простой и полезный сервис для обмена
            сообщениями и смайлами – вам вполне по силам. Кто знает, может вы
            будущий Цукерберг.
        </div>
    </div>
    <div class="news-block third">
        <div class="news-title">
            Особенности тестирования Mobile Web приложений
        </div>
        <div class="news-description">
            Тестирование Mobile Web в чем-то похоже на тестирование Desktop Web. С
            одной стороны это те же HTML, CSS, JavaScript и прочие прелести,
            которые мы привыкли видеть. Те же проблемные места и типичные баги. С
            другой стороны, отличия все же имеются.
        </div>
        <div class="news-text">
            Производительность. Первая причина, почему стоит взять в руки
            мобильное устройство: необходимость проверить работоспособность
            приложения на слабом девайсе. Современные веб-приложения перегружены
            всякого рода анимациями, сложными вычислениями на стороне клиента и
            так далее. Если на десктопе все это добро может работать гладко и
            красиво (хотя тоже не всегда), на каком-нибудь Samsung J-линейки
            (например, J2) могут быть лаги.
            <br />
            Мобильные браузеры. Вторая причина — мобильные браузеры. Речь о тех
            браузерах, которые встроены в систему и являются дефолтными. Многие
            люди используют их и не утруждают себя установкой мобильного Chrome.
            Одним из представителей такого браузера является Samsung Internet
            Browser. На нем стоит проверить работу своего веб-приложения. Особенно
            если нет статистики, показывающей “с чего сидят” ваши пользователи.
            Если такая статистика есть и она утверждает, что с этих браузеров
            никто на приложение не заходит, то скорее всего тестировать его не
            надо.
            <br />
            Работа в Background.Теперь предположим, что по какой-то причине наш
            пользователь перевел браузер с открытым приложением в бэкграунд. А
            затем вернулся. Вот несколько примеров того, что может быть не так.
            Например, у нас приложение-чат и вся история переписки потерялась.
            Теперь требуется перезагрузка страницы. Плохо? Конечно! Или у нас
            приложение “записная книжка”. Пользователь не успел что-то дописать,
            когда его прервал входящий звонок. Вернувшись, он обнаружил, что
            написанное им стерлось. Теперь придется писать все заново. А может
            лучше не пользоваться таким приложением? Обязательно проверяйте, как
            ключевой функционал приложения работает после бэкграунда.<br />
            Электронная клавиатура. Чаще всего пользователи Mobile Web используют
            электронную клавиатуру для ввода текста. Бывает такое, что при ее
            появлении верстка приложения ломается. Обычно эта проблема связана с
            тем, как рассчитываются пропорции экрана и как они влияют на эту самую
            верстку. Стоит обратить особое внимание на те страницы приложения, где
            пользователю приходится заполнять много данных: страница регистрации,
            какие-нибудь опросники и так далее.
        </div>
    </div>
    <div class="news-block fourth">
        <div class="news-title">Учебник по С#: Основы языка</div>
        <div class="news-description">
            Записная книжка программиста-новичка, C#, SQL, PHP и все-все-все
        </div>
        <div class="news-text">
            С# в этом плане еще сложней - сначала ваша программа на C# переводится
            в специальный промежуточный язык - байт-код, после чего уже этот
            промежуточный язык переводится в двоичный код. Промежуточный язык
            рассчитан на специальный набор промежуточных программ, которые надо
            установить на компьютер перед запуском программы на C# - .Net
            Framework.
            <br />
            Таким образом мы: 1. Пишем код на языке C# в обычный текстовый файл 2.
            Компилируем программу в байт-код с помощью компилятора C# (1 и 2 можно
            делать без Visual Studio, например набрать исходный текст в Блокноте и
            скомпилировать через командную строку) 3. Запускаем полученную
            программу на компьютере, где уже установлен .Net Framework
            соответствующей версии), который переводит программу в двоичный код и
            собственно запускает, давая доступ к компьютеру. (соответственно на
            компьютере без Net Framework программа не запустится вообще).
            <br />
            Обычно программы используются для хранения и обработки какой-то
            информации. Например списока покупателей магазина, сотрудников фирмы
            или героев и монстров в компьютерной игре. При работе программы все ее
            данные хранятся в переменных. Переменные и сама программа хранятся в
            оперативной памяти. Переменную можно рассматривать как ящик или сумку
            для данных. Однажды сделав такой ящик мы можем класть в него разные
            вещи. Само собой на нижнем уровне абсолютно все данные хранятся в виде
            нулей и единиц, но языки высокого уровня скрывают от нас ненужные
            сложности. Под каждый тип данных - строку, число, картинку - нужен
            ящик соответствующего типа, вы ведь не будете складывать деньги,
            спички, бензин и котят в одну и ту же коробку. Так что у каждой
            переменной есть тип, который надо указать при ее создании. Тип
            одновременно описывает и размер переменной - сколько данных в нее
            можно сложить. Есть языки программирования, в которых переменные не
            делятся на типы. Что происходит с котятами в таком случае вы узнаете
            чуть позже, в разделе про обработку ошибок.
        </div>
    </div>
</div>
<footer>
    <div class="contacts">
        <div class="connections">Сотрудничество:</div>
        <div class="description">
            <div>+375 29 286 35 77</div>
            <div>ул. Пушкинская  115, этаж 3, каб 20</div>
            <div>lesakpolina@gmail.com</div>
        </div>
    </div>
    <div class="links">
        <img src="../../img/fb.png" />
        <img src="../../img/ig.png" />
        <img src="../../img/tg.png" />
        <img src="../../img/vk.png" />
    </div>
</footer>
<script src="../../userNews.js"></script>
</body>
</html>
